Проект "Шифр Плейфера"

1. Общее описание проекта:
Этот веб-проект представляет собой реализацию классического метода шифрования - шифра Плейфера. Проект разработан с использованием фреймворка Django и предоставляет пользователям возможность шифровать и дешифровать тексты, а также управлять своими зашифрованными сообщениями через веб-интерфейс и API.

2. Основные функции:

2.1. Регистрация и аутентификация пользователей:
   - Пользователи могут создавать учетные записи, указывая имя пользователя и пароль.
   - Система проверяет уникальность имени пользователя и сохраняет зашифрованные пароли.
   - Реализована функция входа в систему с проверкой учетных данных.
   - При регистрации и входе генерируется уникальный токен для API-запросов.

2.2. Шифрование текста:
   - Пользователи могут вводить текст и ключ для шифрования.
   - Реализован алгоритм шифра Плейфера для шифрования введенного текста.
   - Предусмотрена возможность генерации случайного ключа.
   - Пользователи могут просматривать матрицу Плейфера, сформированную на основе ключа.

2.3. Дешифрование текста:
   - Пользователи могут вводить зашифрованный текст и ключ для дешифрования.
   - Реализован алгоритм дешифрования шифра Плейфера.
   - Также доступна функция просмотра матрицы Плейфера для введенного ключа.

2.4. Управление текстами:
   - Пользователи могут сохранять как зашифрованные, так и обычные тексты.
   - Реализован список сохраненных текстов с возможностью просмотра, редактирования и удаления.
   - Для каждого текста хранится информация о том, зашифрован он или нет, а также ключ шифрования (если применимо).

2.5. История операций:
   - Система ведет журнал операций шифрования и дешифрования для каждого пользователя.
   - Пользователи могут просматривать историю своих действий.
   - Предусмотрена возможность очистки истории.

2.6. Профиль пользователя:
   - Пользователи могут изменять свой пароль.
   - При изменении пароля генерируется новый токен аутентификации.

3. Технические аспекты:

3.1. Фреймворк: Django 5.0.1
3.2. Фронтенд: HTML, CSS (Bootstrap 5.1.3), JavaScript
3.3. База данных: SQLite (по умолчанию в Django)
3.4. Аутентификация: Встроенная система аутентификации Django с дополнительным токеном для API
3.5. Безопасность: Использование CSRF-токенов, хеширование паролей
3.6. API: Django Rest Framework 3.14.0
3.7. Веб-сервер: Gunicorn 21.2.0 (для продакшена)

4. Модели данных:

4.1. User (встроенная модель Django):
   - Стандартные поля: username, password, email, etc.

4.2. UserProfile:
   - user: OneToOneField к модели User
   - token: UUIDField для хранения уникального токена API

4.3. Text:
   - user: ForeignKey к модели User
   - title: CharField для названия текста
   - content: TextField для содержания текста
   - original_content: TextField для исходного текста (если применимо)
   - key: CharField для ключа шифрования (если применимо)
   - is_encrypted: BooleanField для указания, зашифрован ли текст
   - is_manually_added: BooleanField для указания, добавлен ли текст вручную
   - created_at: DateTimeField для времени создания
   - updated_at: DateTimeField для времени последнего обновления

4.4. RequestHistory:
   - user: ForeignKey к модели User
   - request_type: CharField для типа запроса (шифрование/дешифрование)
   - timestamp: DateTimeField для времени запроса

5. Представления (Views):

5.1. Функциональные представления:
   - index: главная страница
   - encrypt_page: страница шифрования
   - decrypt_page: страница дешифрования
   - history_page: страница истории операций
   - text_list_page: страница списка текстов
   - view_text_page: страница просмотра отдельного текста
   - add_text_page: страница добавления нового текста
   - profile_page: страница профиля пользователя
   - register_page: страница регистрации
   - login_view: обработка входа пользователя
   - logout_view: обработка выхода пользователя

5.2. API представления:
   - register_user: регистрация нового пользователя
   - user_history: получение и удаление истории операций
   - change_password: изменение пароля пользователя
   - manage_text: CRUD операции с текстами
   - encrypt_text: шифрование текста
   - decrypt_text: дешифрование текста
   - generate_key: генерация случайного ключа
   - get_playfair_matrix: получение матрицы Плейфера для заданного ключа

6. URL-маршруты:

6.1. Веб-интерфейс:
   - /: главная страница
   - /encrypt/: страница шифрования
   - /decrypt/: страница дешифрования
   - /history/: страница истории операций
   - /texts/: список текстов
   - /texts/<id>/: просмотр отдельного текста
   - /texts/add/: добавление нового текста
   - /profile/: профиль пользователя
   - /register/: регистрация
   - /login/: вход
   - /logout/: выход

6.2. API:
   - /api/register/: регистрация нового пользователя (POST)
   - /api/history/: получение (GET) и удаление (DELETE) истории операций
   - /api/change_password/: изменение пароля (PATCH)
   - /api/text/: добавление нового текста (POST) и получение списка текстов (GET)
   - /api/text/<id>/: получение (GET), обновление (PATCH) и удаление (DELETE) отдельного текста
   - /api/encrypt/: шифрование текста (POST)
   - /api/decrypt/: дешифрование текста (POST)
   - /api/generate_key/: генерация случайного ключа (GET)
   - /api/get_playfair_matrix/: получение матрицы Плейфера (POST)

7. Настройки проекта (settings.py):

7.1. Основные настройки:
   - DEBUG = True (для разработки)
   - ALLOWED_HOSTS = ['*'] (разрешены все хосты)
   - LANGUAGE_CODE = 'ru-ru'
   - TIME_ZONE = 'UTC'

7.2. Установленные приложения:
   - 'django.contrib.admin'
   - 'django.contrib.auth'
   - 'django.contrib.contenttypes'
   - 'django.contrib.sessions'
   - 'django.contrib.messages'
   - 'django.contrib.staticfiles'
   - 'cipher'
   - 'rest_framework'
   - 'rest_framework.authtoken'

7.3. Middleware:
   - SecurityMiddleware
   - SessionMiddleware
   - CommonMiddleware
   - CsrfViewMiddleware
   - AuthenticationMiddleware
   - MessageMiddleware
   - XFrameOptionsMiddleware

7.4. База данных:
   - ENGINE: 'django.db.backends.sqlite3'
   - NAME: BASE_DIR / 'db.sqlite3'

7.5. Статические файлы:
   - STATIC_URL = '/static/'
   - STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

7.6. Аутентификация:
   - LOGIN_URL = '/login/'
   - LOGIN_REDIRECT_URL = '/'
   - LOGOUT_REDIRECT_URL = '/'

7.7. REST Framework:
   - DEFAULT_AUTHENTICATION_CLASSES: TokenAuthentication

7.8. CSRF настройки:
   - CSRF_TRUSTED_ORIGINS = ['https://*', 'http://*']
   Эта настройка позволяет принимать CSRF-токены с любых доменов, что может быть полезно при разработке или при использовании API с разных доменов. Однако, для продакшн-среды рекомендуется указать конкретные доверенные домены вместо использования wildcard (*) из соображений безопасности.

8. Алгоритм шифра Плейфера:

8.1. Подготовка ключа:
   - Удаление повторяющихся букв из ключа
   - Замена 'J' на 'I'
   - Добавление оставшихся букв алфавита

8.2. Создание матрицы 5x5 из подготовленного ключа

8.3. Шифрование:
   - Разбиение текста на пары букв
   - Обработка каждой пары согласно правилам шифра Плейфера
   - Если буквы в одной строке: замена на буквы справа по кругу
   - Если буквы в одном столбце: замена на буквы снизу по кругу
   - Если буквы образуют прямоугольник: замена на буквы в противоположных углах

8.4. Дешифрование:
   - Аналогично шифрованию, но с обратными правилами замены

9. Безопасность:

9.1. Аутентификация:
   - Использование встроенной системы аутентификации Django
   - Хеширование паролей с использованием алгоритма PBKDF2
   - Генерация уникальных токенов для API-запросов

9.2. Защита от CSRF-атак:
   - Использование CSRF-токенов в формах и AJAX-запросах

9.3. Защита API:
   - Использование токенов аутентификации для доступа к API-эндпоинтам

9.4. Валидация данных:
   - Проверка входных данных на стороне сервера
   - Экранирование специальных символов для предотвращения XSS-атак

10. Дополнительные функции:

10.1. Генерация случайного ключа:
   - Использование модуля random для создания случайной последовательности букв

10.2. Визуализация матрицы Плейфера:
   - Отображение матрицы 5x5 на основе введенного ключа

10.3. Выбор существующего текста для шифрования/дешифрования:
   - Возможность выбора ранее сохраненного текста из выпадающего списка

11. Тестирование:

11.1. Модульные тесты:
   - Тестирование отдельных функций, таких как подготовка ключа, шифрование и дешифрование

11.2. Интеграционные тесты:
   - Тестирование взаимодействия между различными компонентами системы

11.3. Тестирование API:
   - Проверка корректности работы всех API-эндпоинтов

11.4. Тестирование пользовательского интерфейса:
   - Проверка корректности отображения и функционирования всех страниц

12. Развертывание:

12.1. Локальное развертывание:
   - Установка зависимостей из requirements.txt
   - Настройка переменных окружения
   - Применение миграций базы данных
   - Запуск сервера разработки Django

12.2. Продакшн-развертывание:
   - Настройка веб-сервера (например, Nginx)
   - Использование Gunicorn в качестве WSGI-сервера
   - Настройка HTTPS с использованием SSL-сертификата
   - Настройка базы данных (возможно, переход на PostgreSQL)
   - Отключение режима отладки (DEBUG = False)
   - Настройка ALLOWED_HOSTS для разрешенных доменов

Этот проект демонстрирует реализацию классического криптографического метода в современном веб-приложении, сочетая исторический алгоритм с современными технологиями веб-разработки. Он предоставляет пользователям интуитивно понятный интерфейс для работы с шифром Плейфера, обеспечивая при этом безопасность данных и удобство использования.
